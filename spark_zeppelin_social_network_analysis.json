{"paragraphs":[{"text":"%dep\nz.reset()\n\n// dependencies\nz.load(\"org.apache.hadoop:hadoop-aws:2.7.2\")\nz.load(\"com.databricks:spark-csv_2.10:1.4.0\")\nz.load(\"com.databricks:spark-redshift_2.10:0.6.0\")\nz.load(\"/home/hadoop/RedshiftJDBC41-1.1.10.1010.jar\")\nz.load(\"com.github.nscala-time:nscala-time_2.10:2.12.0\")\nz.load(\"org.apache.commons:commons-lang3:3.4\")\nz.load(\"graphframes:graphframes:0.2.0-spark1.6-s_2.10\")","dateUpdated":"Oct 25, 2016 4:19:15 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136177307_-224588585","id":"20161022-133617_2093472390","result":{"code":"SUCCESS","type":"TEXT","msg":"res0: org.apache.zeppelin.spark.dep.Dependency = org.apache.zeppelin.spark.dep.Dependency@361e86c1\n"},"dateCreated":"Oct 22, 2016 1:36:17 PM","dateStarted":"Oct 25, 2016 4:19:15 PM","dateFinished":"Oct 25, 2016 4:19:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:34","focus":true},{"text":"import org.apache.spark.sql.SQLContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.sql._\nimport java.util.Properties\nimport java.net._\nimport java.io._\nimport scala.collection.mutable.ArrayBuffer\nimport scala.io.Source\nimport com.github.nscala_time.time.Imports._\nimport java.text.SimpleDateFormat\nimport org.joda.time.Years\nimport org.joda.time.Days\nimport org.joda.time.format.DateTimeFormat\nimport org.joda.time.DateTime\nimport org.apache.spark.sql._\nimport org.graphframes.examples\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.graphframes._\nimport org.graphframes.lib.AggregateMessages","dateUpdated":"Oct 25, 2016 4:19:25 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136113809_-888173169","id":"20161022-133513_1202150793","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.spark.sql.SQLContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.sql._\nimport java.util.Properties\nimport java.net._\nimport java.io._\nimport scala.collection.mutable.ArrayBuffer\nimport scala.io.Source\nimport com.github.nscala_time.time.Imports._\nimport java.text.SimpleDateFormat\nimport org.joda.time.Years\nimport org.joda.time.Days\nimport org.joda.time.format.DateTimeFormat\nimport org.joda.time.DateTime\nimport org.apache.spark.sql._\nimport org.graphframes.examples\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.graphframes._\nimport org.graphframes.lib.AggregateMessages\n"},"dateCreated":"Oct 22, 2016 1:35:13 PM","dateStarted":"Oct 25, 2016 4:19:25 PM","dateFinished":"Oct 25, 2016 4:19:45 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:35","focus":true},{"text":"val sqlContext = new SQLContext(sc)\nval df_edges = sqlContext.read\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\") // Use first line of all files as header\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\n        .load(\"/Users/charles.copley/Documents/networkPresentation/data.csv\")\n\nval df_race = sqlContext.read\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\") // Use first line of all files as header\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\n        .load(\"/Users/charles.copley/Documents/networkPresentation/raceNodes.csv\")\n\nval df_sex = sqlContext.read\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\") // Use first line of all files as header\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\n        .load(\"/Users/charles.copley/Documents/networkPresentation/sexNodes.csv\")\n\nval df_grades = sqlContext.read\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\") // Use first line of all files as header\n        .option(\"inferSchema\", \"true\") // Automatically infer data types\n        .load(\"/Users/charles.copley/Documents/networkPresentation/gradeNodes.csv\")","dateUpdated":"Oct 25, 2016 4:20:11 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136441401_134962289","id":"20161022-134041_2040537172","result":{"code":"SUCCESS","type":"TEXT","msg":"sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@395cc42a\ndf_edges: org.apache.spark.sql.DataFrame = [id: int, V1: int, V2: int]\ndf_race: org.apache.spark.sql.DataFrame = [id: int, Race: string]\ndf_sex: org.apache.spark.sql.DataFrame = [id: int, Sex: string]\ndf_grades: org.apache.spark.sql.DataFrame = [id: int, Grade: int]\n"},"dateCreated":"Oct 22, 2016 1:40:41 PM","dateStarted":"Oct 25, 2016 4:20:11 PM","dateFinished":"Oct 25, 2016 4:20:15 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:36","focus":true},{"text":"df_race.count\ndf_edges.count\ndf_sex.count","dateUpdated":"Oct 25, 2016 4:20:18 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477137155410_1607021972","id":"20161022-135235_760558802","result":{"code":"SUCCESS","type":"TEXT","msg":"res6: Long = 1461\nres7: Long = 974\nres8: Long = 1461\n"},"dateCreated":"Oct 22, 2016 1:52:35 PM","dateStarted":"Oct 25, 2016 4:20:18 PM","dateFinished":"Oct 25, 2016 4:20:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:37","focus":true},{"text":"val nodes = df_race\n                .join(df_sex.withColumnRenamed(\"id\",\"id_sex\"),$\"id\"===$\"id_sex\",\"full_outer\")\n                .join(df_grades.withColumnRenamed(\"id\",\"id_grades\"),$\"id\"===$\"id_grades\",\"full_outer\")\n                .drop(\"id_sex\")\n                .drop(\"id_grades\")\n                ","dateUpdated":"Oct 25, 2016 4:20:26 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477137411576_-213469738","id":"20161022-135651_2087488723","result":{"code":"SUCCESS","type":"TEXT","msg":"nodes: org.apache.spark.sql.DataFrame = [id: int, Race: string, Sex: string, Grade: int]\n"},"dateCreated":"Oct 22, 2016 1:56:51 PM","dateStarted":"Oct 25, 2016 4:20:26 PM","dateFinished":"Oct 25, 2016 4:20:27 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:38","focus":true},{"text":"nodes.count","dateUpdated":"Oct 25, 2016 4:20:29 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477137513584_940346241","id":"20161022-135833_1164458777","result":{"code":"SUCCESS","type":"TEXT","msg":"res12: Long = 1461\n"},"dateCreated":"Oct 22, 2016 1:58:33 PM","dateStarted":"Oct 25, 2016 4:20:29 PM","dateFinished":"Oct 25, 2016 4:20:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:39","focus":true},{"text":"val edges = df_edges\n                .drop(\"id\")\n                .withColumnRenamed(\"V1\", \"src\")\n                .withColumnRenamed(\"V2\", \"dst\")","dateUpdated":"Oct 25, 2016 4:20:41 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136491895_1271018522","id":"20161022-134131_327903208","result":{"code":"SUCCESS","type":"TEXT","msg":"edges: org.apache.spark.sql.DataFrame = [src: int, dst: int]\n"},"dateCreated":"Oct 22, 2016 1:41:31 PM","dateStarted":"Oct 25, 2016 4:20:41 PM","dateFinished":"Oct 25, 2016 4:20:41 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:40","focus":true},{"text":"edges.count","dateUpdated":"Oct 25, 2016 4:20:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477137611694_-87547934","id":"20161022-140011_254473247","result":{"code":"SUCCESS","type":"TEXT","msg":"res15: Long = 974\n"},"dateCreated":"Oct 22, 2016 2:00:11 PM","dateStarted":"Oct 25, 2016 4:20:49 PM","dateFinished":"Oct 25, 2016 4:20:49 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:41","focus":true},{"text":"val graph = GraphFrame(nodes, edges)\nval dfnodes = graph.degrees.as('a)\n        .join(graph.outDegrees.as('b),$\"a.id\"===$\"b.id\",\"left_outer\")\n        .join(graph.inDegrees.as('c),$\"a.id\"===$\"c.id\",\"left_outer\")\n        .select($\"a.*\",$\"b.outDegree\",$\"c.inDegree\")\n        .na.fill(0)\n        .orderBy(desc(\"degree\"))\n        .withColumnRenamed(\"outDegree\",\"out_degree\")\n        .withColumnRenamed(\"inDegree\",\"in_degree\")\n        .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\ndfnodes.show(10)\n\n","dateUpdated":"Oct 25, 2016 4:20:53 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136513872_1836614729","id":"20161022-134153_1035418375","result":{"code":"SUCCESS","type":"TEXT","msg":"graph: org.graphframes.GraphFrame = GraphFrame(v:[id: int, Race: string, Sex: string, Grade: int], e:[src: int, dst: int])\ndfnodes: org.apache.spark.sql.DataFrame = [id: int, degree: int, out_degree: int, in_degree: int]\n+----+------+----------+---------+\n|  id|degree|out_degree|in_degree|\n+----+------+----------+---------+\n| 765|     8|         2|        6|\n| 991|     8|         1|        7|\n| 677|     7|         2|        5|\n| 487|     7|         6|        1|\n| 122|     7|         7|        0|\n|1160|     7|         1|        6|\n| 425|     7|         4|        3|\n| 859|     6|         4|        2|\n|  63|     6|         6|        0|\n| 528|     6|         5|        1|\n+----+------+----------+---------+\nonly showing top 10 rows\n\n"},"dateCreated":"Oct 22, 2016 1:41:53 PM","dateStarted":"Oct 25, 2016 4:20:53 PM","dateFinished":"Oct 25, 2016 4:21:09 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:42","focus":true},{"text":"val triangles = graph.triangleCount\n                .run()\n                .withColumnRenamed(\"count\",\"triangle_count\")\n\nval id_triangles_degree = dfnodes.select(\"id\",\"degree\")\n                .as(\"a\")\n                .join(triangles.select(\"*\").withColumnRenamed(\"id\",\"id1\").as(\"b\"),$\"a.id\"===$\"b.id1\")\n                .drop(\"id1\")\n\nimport org.apache.spark.sql.types._\ndef clustering(t: Int, k: Int): Double = {\n         val denom =   (k.toDouble * (k.toDouble - 1.0))\n          if(denom!=0)  2.0 * t.toDouble  / denom\n                   else Double.NaN\n                           }\nval funcClusterCalc = udf(clustering _)\n\nval clustering_nodes = id_triangles_degree\n                     .select($\"*\", funcClusterCalc($\"triangle_count\", $\"degree\") as \"clustering\")\n                     .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\n\n\n\n","dateUpdated":"Oct 25, 2016 4:21:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136549184_-419675414","id":"20161022-134229_1329698554","result":{"code":"SUCCESS","type":"TEXT","msg":"triangles: org.apache.spark.sql.DataFrame = [triangle_count: bigint, id: int, Race: string, Sex: string, Grade: int]\nid_triangles_degree: org.apache.spark.sql.DataFrame = [id: int, degree: int, triangle_count: bigint, Race: string, Sex: string, Grade: int]\nimport org.apache.spark.sql.types._\nclustering: (t: Int, k: Int)Double\nfuncClusterCalc: org.apache.spark.sql.UserDefinedFunction = UserDefinedFunction(<function2>,DoubleType,List(IntegerType, IntegerType))\nclustering_nodes: org.apache.spark.sql.DataFrame = [id: int, degree: int, triangle_count: bigint, Race: string, Sex: string, Grade: int, clustering: double]\n"},"dateCreated":"Oct 22, 2016 1:42:29 PM","dateStarted":"Oct 25, 2016 4:21:49 PM","dateFinished":"Oct 25, 2016 4:21:54 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:43","focus":true},{"text":"clustering_nodes.show(20)","dateUpdated":"Oct 25, 2016 4:21:58 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136608868_-529252230","id":"20161022-134328_690328475","result":{"code":"SUCCESS","type":"TEXT","msg":"+----+------+--------------+-----+---+-----+------------------+\n|  id|degree|triangle_count| Race|Sex|Grade|        clustering|\n+----+------+--------------+-----+---+-----+------------------+\n|  31|     3|             1|White|  F|    9|0.3333333333333333|\n| 231|     1|             0|White|  M|    9|               NaN|\n|1031|     2|             0|Black|  M|    7|               0.0|\n|1231|     2|             0|White|  M|    9|               0.0|\n| 232|     2|             0| Hisp|  F|   12|               0.0|\n| 632|     3|             1|Black|  F|    7|0.3333333333333333|\n| 832|     2|             0|White|  F|   11|               0.0|\n|1232|     2|             1|Black|  F|   10|               1.0|\n|1432|     2|             0|White|  F|   12|               0.0|\n|  33|     1|             0|White|  M|   10|               NaN|\n| 433|     1|             0|White|  M|   10|               NaN|\n| 633|     3|             0|White|  F|    8|               0.0|\n| 833|     2|             1|White|  M|    9|               1.0|\n|1033|     2|             0|White|  M|    7|               0.0|\n|1433|     2|             0|White|  F|   12|               0.0|\n|1434|     2|             0|White|  F|   10|               0.0|\n|  35|     1|             0|White|  F|   10|               NaN|\n| 435|     2|             0|White|  M|   11|               0.0|\n|1035|     2|             0|Other|  M|    8|               0.0|\n|  36|     1|             0|White|  M|    9|               NaN|\n+----+------+--------------+-----+---+-----+------------------+\nonly showing top 20 rows\n\n"},"dateCreated":"Oct 22, 2016 1:43:28 PM","dateStarted":"Oct 25, 2016 4:21:58 PM","dateFinished":"Oct 25, 2016 4:24:45 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:44","focus":true},{"text":"val pagerank = graph.pageRank\n                    .resetProbability(0.15)\n                    .maxIter(20).run()\n                    .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)","dateUpdated":"Oct 25, 2016 4:24:49 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136747899_-1161026893","id":"20161022-134547_983336301","result":{"code":"SUCCESS","type":"TEXT","msg":"pagerank: org.graphframes.GraphFrame = GraphFrame(v:[id: int, Race: string, Sex: string, Grade: int, pagerank: double], e:[src: int, dst: int, weight: double])\n"},"dateCreated":"Oct 22, 2016 1:45:47 PM","dateStarted":"Oct 25, 2016 4:24:49 PM","dateFinished":"Oct 25, 2016 4:25:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:45","focus":true},{"text":"val label_prop = graph.labelPropagation\n                .maxIter(20)\n                .run()\n                .withColumnRenamed(\"label\",\"label_prop\")\n                .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)","dateUpdated":"Oct 25, 2016 4:25:34 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136605034_1301179","id":"20161022-134325_984656947","result":{"code":"SUCCESS","type":"TEXT","msg":"label_prop: org.apache.spark.sql.DataFrame = [id: int, Race: string, Sex: string, Grade: int, label_prop: bigint]\n"},"dateCreated":"Oct 22, 2016 1:43:25 PM","dateStarted":"Oct 25, 2016 4:25:34 PM","dateFinished":"Oct 25, 2016 4:26:06 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46","focus":true},{"text":"val label_counts = label_prop\n                        .groupBy(\"label_prop\")\n                        .count\n                        .withColumnRenamed(\"count\",\"label_count\")\n                        .as('a)\n                        .join(label_prop.withColumnRenamed(\"label_prop\",\"label_prop1\").as('b),$\"a.label_prop\"===$\"b.label_prop1\",\"right\")\n                        .drop(\"label_prop1\")\n                        .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\n\n\nlabel_counts.count","dateUpdated":"Oct 25, 2016 4:26:17 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136825541_960786671","id":"20161022-134705_1744521566","result":{"code":"SUCCESS","type":"TEXT","msg":"label_counts: org.apache.spark.sql.DataFrame = [label_prop: bigint, label_count: bigint, id: int, Race: string, Sex: string, Grade: int]\nres29: Long = 1461\n"},"dateCreated":"Oct 22, 2016 1:47:05 PM","dateStarted":"Oct 25, 2016 4:26:17 PM","dateFinished":"Oct 25, 2016 4:26:55 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:47","focus":true},{"text":"label_counts.show(20)\n","dateUpdated":"Oct 25, 2016 4:27:22 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477137100655_-566668107","id":"20161022-135140_1936654456","result":{"code":"SUCCESS","type":"TEXT","msg":"+----------+-----------+----+-----+---+-----+\n|label_prop|label_count|  id| Race|Sex|Grade|\n+----------+-----------+----+-----+---+-----+\n|        31|          2|  31|White|  F|    9|\n|        31|          2| 665|White|  F|    9|\n|       431|          1| 431|Black|  F|    9|\n|       631|          1| 631|White|  F|    7|\n|       831|          1| 831| Hisp|  F|   12|\n|      1431|          1|1431|White|  F|   12|\n|        32|          1|  32|Asian|  M|    9|\n|       432|          1| 432|White|  M|    9|\n|       632|          2| 632|Black|  F|    7|\n|       632|          2| 745|Black|  F|    7|\n|       832|          1| 832|White|  F|   11|\n|      1032|          1|1032|White|  F|    7|\n|        33|          5|  33|White|  M|   10|\n|        33|          5| 248|White|  F|   11|\n|        33|          5| 319| Hisp|  M|   11|\n|        33|          5| 571|White|  F|   10|\n|        33|          5| 585|White|  F|   10|\n|       233|          1| 233|White|  M|   12|\n|       433|          1| 433|White|  M|   10|\n|       633|          1| 633|White|  F|    8|\n+----------+-----------+----+-----+---+-----+\nonly showing top 20 rows\n\n"},"dateCreated":"Oct 22, 2016 1:51:40 PM","dateStarted":"Oct 25, 2016 4:27:22 PM","dateFinished":"Oct 25, 2016 4:27:23 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:48","focus":true},{"text":"val combined_nodes = label_counts.join(\n                                dfnodes.withColumnRenamed(\"id\",\"id1\"),$\"id\"===$\"id1\",\"left\")\n                        .drop(\"id1\")\n                        .join(\n                                 clustering_nodes.select(\"id\",\"triangle_count\",\"clustering\")\n                                                .drop(\"degree\")\n                                                .withColumnRenamed(\"id\",\"id1\"),$\"id\"===$\"id1\",\"left\")\n                        .drop(\"id1\")\n                        .join(\n                                 pagerank.vertices.select(\"id\",\"pagerank\").withColumnRenamed(\"id\",\"id1\"),$\"id\"===$\"id1\",\"left\")\n                        .drop(\"id1\")\n                        .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)\n\ncombined_nodes.show(10)\n\n","dateUpdated":"Oct 25, 2016 4:27:33 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136658701_-1715220195","id":"20161022-134418_1524770101","result":{"code":"SUCCESS","type":"TEXT","msg":"combined_nodes: org.apache.spark.sql.DataFrame = [label_prop: bigint, label_count: bigint, id: int, Race: string, Sex: string, Grade: int, degree: int, out_degree: int, in_degree: int, triangle_count: bigint, clustering: double, pagerank: double]\n+----------+-----------+----+-----+---+-----+------+----------+---------+--------------+------------------+-------------------+\n|label_prop|label_count|  id| Race|Sex|Grade|degree|out_degree|in_degree|triangle_count|        clustering|           pagerank|\n+----------+-----------+----+-----+---+-----+------+----------+---------+--------------+------------------+-------------------+\n|        31|          2|  31|White|  F|    9|     3|         3|        0|             1|0.3333333333333333|               0.15|\n|      1110|          6| 231|White|  M|    9|     1|         1|        0|             0|               NaN|               0.15|\n|       431|          1| 431|Black|  F|    9|  null|      null|     null|          null|              null|               0.15|\n|       631|          1| 631|White|  F|    7|  null|      null|     null|          null|              null|               0.15|\n|       831|          1| 831| Hisp|  F|   12|  null|      null|     null|          null|              null|               0.15|\n|       524|          3|1031|Black|  M|    7|     2|         1|        1|             0|               0.0|         0.24084375|\n|       218|          2|1231|White|  M|    9|     2|         1|        1|             0|               0.0|0.38587499999999997|\n|      1431|          1|1431|White|  F|   12|  null|      null|     null|          null|              null|               0.15|\n|        32|          1|  32|Asian|  M|    9|  null|      null|     null|          null|              null|               0.15|\n|       195|          3| 232| Hisp|  F|   12|     2|         2|        0|             0|               0.0|               0.15|\n+----------+-----------+----+-----+---+-----+------+----------+---------+--------------+------------------+-------------------+\nonly showing top 10 rows\n\n"},"dateCreated":"Oct 22, 2016 1:44:18 PM","dateStarted":"Oct 25, 2016 4:27:33 PM","dateFinished":"Oct 25, 2016 4:28:12 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:49","focus":true},{"text":"clustering_nodes.count\ncombined_nodes.groupBy(\"label_prop\").count.count","dateUpdated":"Oct 22, 2016 4:04:26 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477143946012_1811442868","id":"20161022-154546_239649965","result":{"code":"SUCCESS","type":"TEXT","msg":"res142: Long = 937\nres143: Long = 1042\n"},"dateCreated":"Oct 22, 2016 3:45:46 PM","dateStarted":"Oct 22, 2016 4:04:26 PM","dateFinished":"Oct 22, 2016 4:04:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:50"},{"text":"val AM = AggregateMessages\nval msgToSrcRace = when(AM.dst(\"Race\")===AM.src(\"Race\"),1)\nval msgToDstRace = when(AM.src(\"Race\")=== AM.dst(\"Race\"),1)\nval aggrace = graph.aggregateMessages\n  .sendToSrc(msgToSrcRace)  // send destination user's age to source\n  .sendToDst(msgToDstRace)  // send destination user's age to source\n  .agg(sum(AM.msg).as(\"summed_race\"))  // sum up ages, stored in AM.msg column\n\n//this generates a new attribute on each node which is the total number of connected msisdns that have the same sex\nval msgToSrcSex = when(AM.dst(\"Sex\")===AM.src(\"Sex\"),1)\nval msgToDstSex = when(AM.src(\"Sex\")=== AM.dst(\"Sex\"),1)\nval aggsex = graph.aggregateMessages\n  .sendToSrc(msgToSrcSex)  // send destination user's age to source\n  .sendToDst(msgToDstSex)  // send destination user's age to source\n  .agg(sum(AM.msg).as(\"summed_sex\"))  // sum up ages, stored in AM.msg column\n\nval msgToSrcGrade = when(AM.dst(\"Grade\")===AM.src(\"Grade\"),1)\nval msgToDstGrade = when(AM.src(\"Grade\")=== AM.dst(\"Grade\"),1)\nval aggGrade = graph.aggregateMessages\n  .sendToSrc(msgToSrcGrade)  // send destination user's age to source\n  .sendToDst(msgToDstGrade)  // send destination user's age to source\n  .agg(sum(AM.msg).as(\"summed_grade\"))  // sum up ages, stored in AM.msg column\n","dateUpdated":"Oct 25, 2016 4:27:51 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477136796797_1301827438","id":"20161022-134636_945683490","result":{"code":"SUCCESS","type":"TEXT","msg":"AM: org.graphframes.lib.AggregateMessages.type = org.graphframes.lib.AggregateMessages$@cf30763\nmsgToSrcRace: org.apache.spark.sql.Column = CASE WHEN (dst[Race] = src[Race]) THEN 1\nmsgToDstRace: org.apache.spark.sql.Column = CASE WHEN (src[Race] = dst[Race]) THEN 1\naggrace: org.apache.spark.sql.DataFrame = [id: int, summed_race: bigint]\nmsgToSrcSex: org.apache.spark.sql.Column = CASE WHEN (dst[Sex] = src[Sex]) THEN 1\nmsgToDstSex: org.apache.spark.sql.Column = CASE WHEN (src[Sex] = dst[Sex]) THEN 1\naggsex: org.apache.spark.sql.DataFrame = [id: int, summed_sex: bigint]\nmsgToSrcGrade: org.apache.spark.sql.Column = CASE WHEN (dst[Grade] = src[Grade]) THEN 1\nmsgToDstGrade: org.apache.spark.sql.Column = CASE WHEN (src[Grade] = dst[Grade]) THEN 1\naggGrade: org.apache.spark.sql.DataFrame = [id: int, summed_grade: bigint]\n"},"dateCreated":"Oct 22, 2016 1:46:36 PM","dateStarted":"Oct 25, 2016 4:27:51 PM","dateFinished":"Oct 25, 2016 4:28:14 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:51","focus":true},{"text":"val aggVals = combined_nodes.as(\"a\").join(\n                                    aggsex.withColumnRenamed(\"id\",\"id1\").as(\"b\"),$\"a.id\"===$\"b.id1\",\"left\")\n                                .drop(\"id1\")\n                                .join(\n                                    aggGrade.withColumnRenamed(\"id\",\"id1\"),$\"a.id\"===$\"id1\",\"left\")\n                                .drop(\"id1\")\n                                .join(\n                                    aggrace.withColumnRenamed(\"id\",\"id2\"),$\"id\"===$\"id2\",\"left\")\n                                .withColumn(\"race_homophilly\",$\"summed_race\"/$\"degree\")\n                                .withColumn(\"grade_homophilly\",$\"summed_grade\"/$\"degree\")\n                                .withColumn(\"sex_homophilly\",$\"summed_sex\"/$\"degree\")\n                                .drop(\"id2\")\n                                .persist(org.apache.spark.storage.StorageLevel.MEMORY_ONLY_SER)","dateUpdated":"Oct 25, 2016 4:27:56 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477138586735_-1333959226","id":"20161022-141626_1811143612","result":{"code":"SUCCESS","type":"TEXT","msg":"aggVals: org.apache.spark.sql.DataFrame = [label_prop: bigint, label_count: bigint, id: int, Race: string, Sex: string, Grade: int, degree: int, out_degree: int, in_degree: int, triangle_count: bigint, clustering: double, pagerank: double, summed_sex: bigint, summed_grade: bigint, summed_race: bigint, race_homophilly: double, grade_homophilly: double, sex_homophilly: double]\n"},"dateCreated":"Oct 22, 2016 2:16:26 PM","dateStarted":"Oct 25, 2016 4:28:12 PM","dateFinished":"Oct 25, 2016 4:28:18 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:52","focus":true},{"text":"aggVals.select(\"id\").show(20)\naggVals.count","dateUpdated":"Oct 25, 2016 4:18:39 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477138798114_-1523550133","id":"20161022-141958_19372711","result":"org.apache.zeppelin.interpreter.InterpreterException: org.apache.thrift.transport.TTransportException: java.net.ConnectException: Connection refused","dateCreated":"Oct 22, 2016 2:19:58 PM","dateStarted":"Oct 25, 2016 4:18:40 PM","dateFinished":"Oct 25, 2016 4:18:40 PM","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:53","errorMessage":"java.net.ConnectException: Connection refused\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:182)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:139)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.interpret(RemoteInterpreter.java:188)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:93)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:211)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:169)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:322)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n","focus":true},{"text":"aggVals.select(\"race_homophilly\",\"sex_homophilly\",\"grade_homophilly\").describe().show","dateUpdated":"Oct 22, 2016 4:16:29 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477143130446_336148140","id":"20161022-153210_456733361","result":{"code":"SUCCESS","type":"TEXT","msg":"+-------+-------------------+-------------------+------------------+\n|summary|    race_homophilly|     sex_homophilly|  grade_homophilly|\n+-------+-------------------+-------------------+------------------+\n|  count|                809|                813|               840|\n|   mean| 0.9252030725763729| 0.8509561881333096|0.9224064625850339|\n| stddev|0.17339307503548956|0.22590219736954859|0.1768778746855392|\n|    min|                0.2|0.16666666666666666|              0.25|\n|    max|                1.0|                1.0|               1.0|\n+-------+-------------------+-------------------+------------------+\n\n"},"dateCreated":"Oct 22, 2016 3:32:10 PM","dateStarted":"Oct 22, 2016 4:16:29 PM","dateFinished":"Oct 22, 2016 4:16:33 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:54"},{"text":"aggVals.count","dateUpdated":"Oct 22, 2016 4:16:08 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477143811207_-1189830060","id":"20161022-154331_1447659527","result":{"code":"SUCCESS","type":"TEXT","msg":"res152: Long = 1461\n"},"dateCreated":"Oct 22, 2016 3:43:31 PM","dateStarted":"Oct 22, 2016 4:16:08 PM","dateFinished":"Oct 22, 2016 4:16:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:55"},{"text":"aggVals.printSchema","dateUpdated":"Oct 25, 2016 4:28:28 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477145897521_1893350580","id":"20161022-161817_346483065","result":{"code":"SUCCESS","type":"TEXT","msg":"root\n |-- label_prop: long (nullable = true)\n |-- label_count: long (nullable = true)\n |-- id: integer (nullable = true)\n |-- Race: string (nullable = true)\n |-- Sex: string (nullable = true)\n |-- Grade: integer (nullable = true)\n |-- degree: integer (nullable = true)\n |-- out_degree: integer (nullable = true)\n |-- in_degree: integer (nullable = true)\n |-- triangle_count: long (nullable = true)\n |-- clustering: double (nullable = true)\n |-- pagerank: double (nullable = true)\n |-- summed_sex: long (nullable = true)\n |-- summed_grade: long (nullable = true)\n |-- summed_race: long (nullable = true)\n |-- race_homophilly: double (nullable = true)\n |-- grade_homophilly: double (nullable = true)\n |-- sex_homophilly: double (nullable = true)\n\n"},"dateCreated":"Oct 22, 2016 4:18:17 PM","dateStarted":"Oct 25, 2016 4:28:28 PM","dateFinished":"Oct 25, 2016 4:28:28 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:56","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477405832309_-637537216","id":"20161025-163032_87315390","dateCreated":"Oct 25, 2016 4:30:32 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:590","text":"val writeAggVals = aggVals.withColumnRenamed(\"label_prop\",\"Label\")\n                        .withColumnRenamed(\"id\",\"UserId\")\n                        .withColumnRenamed(\"pagerank\",\"Pagerank\")\n                        .withColumnRenamed(\"race_homophilly\",\"Race_homophilly\")\n                        .withColumnRenamed(\"grade_homophilly\",\"Grade_homophilly\")\n                        .withColumnRenamed(\"sex_homophilly\",\"Gender_homophilly\")\n                        .withColumnRenamed(\"Sex\",\"Gender\")\n\n\n    ","dateUpdated":"Oct 25, 2016 4:36:15 PM","dateFinished":"Oct 25, 2016 4:36:16 PM","dateStarted":"Oct 25, 2016 4:36:15 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"writeAggVals: org.apache.spark.sql.DataFrame = [Label: bigint, label_count: bigint, UserId: int, Race: string, Gender: string, Grade: int, degree: int, out_degree: int, in_degree: int, triangle_count: bigint, clustering: double, Pagerank: double, summed_sex: bigint, summed_grade: bigint, summed_race: bigint, Race_homophilly: double, Grade_homophilly: double, Gender_homophilly: double]\n"}},{"text":"writeAggVals.select(\"UserId\",\"Gender\",\"Grade\",\"Race\",\"Gender_homophilly\",\"Grade_homophilly\",\"Race_homophilly\",\"Label\",\"Pagerank\")\n        .coalesce(1)\n        .write\n        .mode(\"Overwrite\")\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .save(\"/Users/charles.copley/Documents/networkPresentation/nodes.csv\")\n        \nwriteAggVals.select(\"UserId\",\"Gender\",\"Grade\",\"Race\",\"Gender_homophilly\",\"Grade_homophilly\",\"Race_homophilly\",\"Label\",\"Pagerank\")\n        .where(\"Gender='F'\")\n        .coalesce(1)\n        .withColumnRenamed(\"id\",\"UserId\")\n        .write\n        .mode(\"Overwrite\")\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .save(\"/Users/charles.copley/Documents/networkPresentation/nodes_female.csv\")\n\nwriteAggVals.select(\"UserId\",\"Gender\",\"Grade\",\"Race\",\"Gender_homophilly\",\"Grade_homophilly\",\"Race_homophilly\",\"Label\",\"Pagerank\")\n        .where(\"Gender='M'\")\n        .coalesce(1)\n        .withColumnRenamed(\"id\",\"UserId\")\n        .write\n        .mode(\"Overwrite\")\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .save(\"/Users/charles.copley/Documents/networkPresentation/nodes_male.csv\")\n\npagerank.edges\n        .coalesce(1)\n        .write\n        .mode(\"Overwrite\")\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .save(\"/Users/charles.copley/Documents/networkPresentation/edges.csv\")\n\n","dateUpdated":"Oct 25, 2016 4:36:18 PM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477138629984_-1031469970","id":"20161022-141709_2136927246","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Oct 22, 2016 2:17:09 PM","dateStarted":"Oct 25, 2016 4:36:19 PM","dateFinished":"Oct 25, 2016 4:44:38 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:57","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1477145812132_439815208","id":"20161022-161652_1402484776","dateCreated":"Oct 22, 2016 4:16:52 PM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:58"}],"name":"social network analysis example","id":"2C1U13ZAQ","angularObjects":{"2BP4DVSAT":[],"2BNK7GF9D":[],"2BNPHJ23D":[],"2BQD3EKN7":[],"2BPTY12YD":[],"2BNJ5XHEX":[],"2BM7PYFHD":[],"2BNWRPXUN":[],"2BPG7R4H4":[],"2BN2FM23N":[],"2BQBPV6YN":[],"2BN2VD8DT":[],"2BQNP3QSR":[],"2BN542PKX":[]},"config":{"looknfeel":"default"},"info":{}}